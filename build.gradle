plugins {
    id 'maven-publish'
}

group 'com.paul'
version getTagOrDefault('1.0.0-SNAPSHOT')

def deployUsr = project.findProperty("gpr.usr") ?: System.getenv("USERNAME") ?: ''
def deployKey = project.findProperty("gpr.key") ?: System.getenv("TOKEN") ?: System.getenv('GITHUB_TOKEN')
def repoKey = System.getenv('GITHUB_REPOSITORY') ?: "$deployUsr/$projectDir.name"
def publishUrl = "https://maven.pkg.github.com/$repoKey"

publishing {
    repositories {
        maven {
            name = 'GitHub'
            url = uri(publishUrl)
            credentials {
                username = deployUsr
                password = deployKey
            }
        }
    }
    publications {
        maven(MavenPublication) {
            pom.withXml {
                def project = it.asNode()
                def srcDir = "$projectDir/versions"

                def versionProperties = new Properties()
                versionProperties.load(new StringReader(file("$srcDir/versions.properties").text))

                def propertiesNode = new Node(project, "properties")
                versionProperties.entrySet().each { propertiesNode.appendNode(it.key, it.value) }

                def dependencyManagement = new Node(project, "dependencyManagement")
                def dependencies = new Node(dependencyManagement, "dependencies")

                file("$srcDir/dependencies").listFiles().each {
                    def groupIdFromFile = it.name - '.properties'
                    def dependencyVersions = new Properties()
                    dependencyVersions.load(new StringReader(it.text))
                    dependencyVersions.entrySet().each {
                        def dependency = new Node(dependencies, "dependency")
                        dependency.appendNode("groupId", groupIdFromFile)
                        dependency.appendNode("artifactId", it.key)
                        dependency.appendNode("version",
                                versionProperties.hasProperty(it.value as String) ? it.value : "\${$it.value}")
                    }
                }
            }
        }
    }
}

private static String getTagOrDefault(String defaultValue) {
    String ref = System.getenv('GITHUB_REF')

    if (!ref) {
        return defaultValue
    }

    if (ref.startsWith('refs/tags/')) {
        return ref.substring('refs/tags/'.length())
    }

    return defaultValue
}
